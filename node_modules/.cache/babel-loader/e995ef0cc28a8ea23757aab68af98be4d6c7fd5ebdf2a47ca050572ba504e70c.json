{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst usersAdapter = createEntityAdapter({});\nconst initialState = usersAdapter.getInitialState();\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => ({\n        url: \"/users\",\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        }\n      }),\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: \"User\",\n            id: \"LIST\"\n          }, ...result.ids.map(id => ({\n            type: \"User\",\n            id\n          }))];\n        } else return [{\n          type: \"User\",\n          id: \"LIST\"\n        }];\n      }\n    }),\n    addNewUser: builder.mutation({\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"POST\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      invalidatesTags: [{\n        type: \"User\",\n        id: \"LIST\"\n      }]\n    }),\n    updateUser: builder.mutation({\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"PATCH\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    }),\n    deleteUser: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/users`,\n          method: \"DELETE\",\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation\n} = usersApiSlice;\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// creates memoized selector\nconst selectUsersData = createSelector(selectUsersResult, usersResult => usersResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds\n  // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => {\n  var _selectUsersData;\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","url","validateStatus","response","result","status","isError","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","addNewUser","mutation","initialUserData","method","body","invalidatesTags","updateUser","deleteUser","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","usersResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/users/usersApiSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\nconst usersAdapter = createEntityAdapter({});\n\nconst initialState = usersAdapter.getInitialState();\n\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    getUsers: builder.query({\n      query: () => ({\n        url: \"/users\",\n        validateStatus: (response, result) => {\n          return response.status === 200 && !result.isError;\n        },\n      }),\n      transformResponse: (responseData) => {\n        const loadedUsers = responseData.map((user) => {\n          user.id = user._id;\n          return user;\n        });\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      providesTags: (result, error, arg) => {\n        if (result?.ids) {\n          return [\n            { type: \"User\", id: \"LIST\" },\n            ...result.ids.map((id) => ({ type: \"User\", id })),\n          ];\n        } else return [{ type: \"User\", id: \"LIST\" }];\n      },\n    }),\n    addNewUser: builder.mutation({\n      query: (initialUserData) => ({\n        url: \"/users\",\n        method: \"POST\",\n        body: {\n          ...initialUserData,\n        },\n      }),\n      invalidatesTags: [{ type: \"User\", id: \"LIST\" }],\n    }),\n    updateUser: builder.mutation({\n      query: (initialUserData) => ({\n        url: \"/users\",\n        method: \"PATCH\",\n        body: {\n          ...initialUserData,\n        },\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: \"User\", id: arg.id }],\n    }),\n    deleteUser: builder.mutation({\n      query: ({ id }) => ({\n        url: `/users`,\n        method: \"DELETE\",\n        body: { id },\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: \"User\", id: arg.id }],\n    }),\n  }),\n});\n\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation,\n} = usersApiSlice;\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// creates memoized selector\nconst selectUsersData = createSelector(\n  selectUsersResult,\n  (usersResult) => usersResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds,\n  // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(\n  (state) => selectUsersData(state) ?? initialState\n);\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,kBAAkB;AACtE,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,YAAY,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAE5C,MAAMG,YAAY,GAAGD,YAAY,CAACE,eAAe,EAAE;AAEnD,OAAO,MAAMC,aAAa,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACpDC,SAAS,EAAGC,OAAO,KAAM;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAE,OAAO;QACZC,GAAG,EAAE,QAAQ;QACbC,cAAc,EAAE,CAACC,QAAQ,EAAEC,MAAM,KAAK;UACpC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;QACnD;MACF,CAAC,CAAC;MACFC,iBAAiB,EAAGC,YAAY,IAAK;QACnC,MAAMC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAAEC,IAAI,IAAK;UAC7CA,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACE,GAAG;UAClB,OAAOF,IAAI;QACb,CAAC,CAAC;QACF,OAAOnB,YAAY,CAACsB,MAAM,CAACrB,YAAY,EAAEgB,WAAW,CAAC;MACvD,CAAC;MACDM,YAAY,EAAE,CAACX,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK;QACpC,IAAIb,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEc,GAAG,EAAE;UACf,OAAO,CACL;YAAEC,IAAI,EAAE,MAAM;YAAEP,EAAE,EAAE;UAAO,CAAC,EAC5B,GAAGR,MAAM,CAACc,GAAG,CAACR,GAAG,CAAEE,EAAE,KAAM;YAAEO,IAAI,EAAE,MAAM;YAAEP;UAAG,CAAC,CAAC,CAAC,CAClD;QACH,CAAC,MAAM,OAAO,CAAC;UAAEO,IAAI,EAAE,MAAM;UAAEP,EAAE,EAAE;QAAO,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC;IACFQ,UAAU,EAAEtB,OAAO,CAACuB,QAAQ,CAAC;MAC3BrB,KAAK,EAAGsB,eAAe,KAAM;QAC3BrB,GAAG,EAAE,QAAQ;QACbsB,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UACJ,GAAGF;QACL;MACF,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC;QAAEN,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAE;MAAO,CAAC;IAChD,CAAC,CAAC;IACFc,UAAU,EAAE5B,OAAO,CAACuB,QAAQ,CAAC;MAC3BrB,KAAK,EAAGsB,eAAe,KAAM;QAC3BrB,GAAG,EAAE,QAAQ;QACbsB,MAAM,EAAE,OAAO;QACfC,IAAI,EAAE;UACJ,GAAGF;QACL;MACF,CAAC,CAAC;MACFG,eAAe,EAAE,CAACrB,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK,CAAC;QAAEE,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAEK,GAAG,CAACL;MAAG,CAAC;IACxE,CAAC,CAAC;IACFe,UAAU,EAAE7B,OAAO,CAACuB,QAAQ,CAAC;MAC3BrB,KAAK,EAAE;QAAA,IAAC;UAAEY;QAAG,CAAC;QAAA,OAAM;UAClBX,GAAG,EAAG,QAAO;UACbsB,MAAM,EAAE,QAAQ;UAChBC,IAAI,EAAE;YAAEZ;UAAG;QACb,CAAC;MAAA,CAAC;MACFa,eAAe,EAAE,CAACrB,MAAM,EAAEY,KAAK,EAAEC,GAAG,KAAK,CAAC;QAAEE,IAAI,EAAE,MAAM;QAAEP,EAAE,EAAEK,GAAG,CAACL;MAAG,CAAC;IACxE,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXgB,gBAAgB;EAChBC,qBAAqB;EACrBC,qBAAqB;EACrBC;AACF,CAAC,GAAGpC,aAAa;;AAEjB;AACA,OAAO,MAAMqC,iBAAiB,GAAGrC,aAAa,CAACE,SAAS,CAACE,QAAQ,CAACkC,MAAM,EAAE;;AAE1E;AACA,MAAMC,eAAe,GAAG7C,cAAc,CACpC2C,iBAAiB,EAChBG,WAAW,IAAKA,WAAW,CAACC,IAAI,CAAC;AAAA,CACnC;;AAED;AACA,OAAO,MAAM;EACXC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;EACX;AACF,CAAC,GAAGlD,YAAY,CAACmD,YAAY,CAC1BC,KAAK;EAAA;EAAA,2BAAKV,eAAe,CAACU,KAAK,CAAC,+DAAInD,YAAY;AAAA,EAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}