{"ast":null,"code":"var _jsxFileName = \"/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/users/User.jsx\",\n  _s = $RefreshSig$();\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPenToSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGetUsersQuery } from \"./usersApiSlice\";\nimport { memo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst User = _ref => {\n  _s();\n  let {\n    userId\n  } = _ref;\n  // Declaring user variable using useGetUsersQuery, selectFromResult\n  const {\n    user\n  } = useGetUsersQuery(\"usersList\", {\n    selectFromResult: _ref2 => {\n      let {\n        data\n      } = _ref2;\n      return {\n        user: data === null || data === void 0 ? void 0 : data.entities[userId]\n      };\n    }\n  });\n  // Declaring navigate to redirect\n  const navigate = useNavigate();\n  if (user) {\n    const handleEdit = () => navigate(`/dash/users/${userId}`);\n    const userRolesString = user.roles.toString().replace(\",\", \", \");\n    const cellStatus = user.active ? \"\" : \"table__cell--inactive\";\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      className: \"table__row user\",\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: `table__cell ${cellStatus}`,\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: `table__cell ${cellStatus}`,\n        children: userRolesString\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: `table__cell ${cellStatus}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"icon-button table__button\",\n          onClick: handleEdit,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPenToSquare\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  } else return null;\n};\n\n// using memo on the created Note so the component only rerender if their are changes in the data\n// const memoizedUser = memo(User);\n_s(User, \"nFqtwNlCeE5zrh9x1OyrBZOgdVA=\", false, function () {\n  return [useGetUsersQuery, useNavigate];\n});\n_c = User;\nexport default User;\n// export default memoizedUser;\nvar _c;\n$RefreshReg$(_c, \"User\");","map":{"version":3,"names":["FontAwesomeIcon","faPenToSquare","useNavigate","useGetUsersQuery","memo","User","userId","user","selectFromResult","data","entities","navigate","handleEdit","userRolesString","roles","toString","replace","cellStatus","active","username"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/users/User.jsx"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPenToSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGetUsersQuery } from \"./usersApiSlice\";\nimport { memo } from \"react\";\n\nconst User = ({ userId }) => {\n  // Declaring user variable using useGetUsersQuery, selectFromResult\n  const { user } = useGetUsersQuery(\"usersList\", {\n    selectFromResult: ({ data }) => ({\n      user: data?.entities[userId],\n    }),\n  });\n  // Declaring navigate to redirect\n  const navigate = useNavigate();\n\n  if (user) {\n    const handleEdit = () => navigate(`/dash/users/${userId}`);\n\n    const userRolesString = user.roles.toString().replace(\",\", \", \");\n\n    const cellStatus = user.active ? \"\" : \"table__cell--inactive\";\n\n    return (\n      <tr className=\"table__row user\">\n        <td className={`table__cell ${cellStatus}`}>{user.username}</td>\n        <td className={`table__cell ${cellStatus}`}>{userRolesString}</td>\n        <td className={`table__cell ${cellStatus}`}>\n          <button className=\"icon-button table__button\" onClick={handleEdit}>\n            <FontAwesomeIcon icon={faPenToSquare} />\n          </button>\n        </td>\n      </tr>\n    );\n  } else return null;\n};\n\n// using memo on the created Note so the component only rerender if their are changes in the data\n// const memoizedUser = memo(User);\n\nexport default User;\n// export default memoizedUser;\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ,gCAAgC;AAChE,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,IAAI,QAAQ,OAAO;AAAC;AAE7B,MAAMC,IAAI,GAAG,QAAgB;EAAA;EAAA,IAAf;IAAEC;EAAO,CAAC;EACtB;EACA,MAAM;IAAEC;EAAK,CAAC,GAAGJ,gBAAgB,CAAC,WAAW,EAAE;IAC7CK,gBAAgB,EAAE;MAAA,IAAC;QAAEC;MAAK,CAAC;MAAA,OAAM;QAC/BF,IAAI,EAAEE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,QAAQ,CAACJ,MAAM;MAC7B,CAAC;IAAA;EACH,CAAC,CAAC;EACF;EACA,MAAMK,QAAQ,GAAGT,WAAW,EAAE;EAE9B,IAAIK,IAAI,EAAE;IACR,MAAMK,UAAU,GAAG,MAAMD,QAAQ,CAAE,eAAcL,MAAO,EAAC,CAAC;IAE1D,MAAMO,eAAe,GAAGN,IAAI,CAACO,KAAK,CAACC,QAAQ,EAAE,CAACC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;IAEhE,MAAMC,UAAU,GAAGV,IAAI,CAACW,MAAM,GAAG,EAAE,GAAG,uBAAuB;IAE7D,oBACE;MAAI,SAAS,EAAC,iBAAiB;MAAA,wBAC7B;QAAI,SAAS,EAAG,eAAcD,UAAW,EAAE;QAAA,UAAEV,IAAI,CAACY;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAM,eAChE;QAAI,SAAS,EAAG,eAAcF,UAAW,EAAE;QAAA,UAAEJ;MAAe;QAAA;QAAA;QAAA;MAAA,QAAM,eAClE;QAAI,SAAS,EAAG,eAAcI,UAAW,EAAE;QAAA,uBACzC;UAAQ,SAAS,EAAC,2BAA2B;UAAC,OAAO,EAAEL,UAAW;UAAA,uBAChE,QAAC,eAAe;YAAC,IAAI,EAAEX;UAAc;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA;MACjC;QAAA;QAAA;QAAA;MAAA,QACN;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAET,CAAC,MAAM,OAAO,IAAI;AACpB,CAAC;;AAED;AACA;AAAA,GAhCMI,IAAI;EAAA,QAESF,gBAAgB,EAMhBD,WAAW;AAAA;AAAA,KARxBG,IAAI;AAkCV,eAAeA,IAAI;AACnB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}