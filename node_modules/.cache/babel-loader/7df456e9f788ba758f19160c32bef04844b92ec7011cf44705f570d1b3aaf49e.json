{"ast":null,"code":"import { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\n// LEARN MORE ABOUT createEntityAdapter/ using ids to get data from entities\nconst noteAdapter = createEntityAdapter({\n  // sorting notes by completed or open status\n  sortComparer: (a, b) => a.completed === b.completed ? 0 : a.completed ? 1 : -1\n});\nconst initialSate = noteAdapter.getInitialState();\nexport const notesApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getNotes: builder.query({\n      query: () => \"/notes\",\n      // validating status\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      //   since using mongoDB have to set id to use createEntityAdapter\n      //   so the data can be stored as ids and entities\n      transformResponse: responseData => {\n        const loadNotes = responseData.map(note => {\n          note.id = note._id;\n          return note;\n        });\n        return noteAdapter.setAll(initialSate, loadNotes);\n      },\n      providesTags: (result, error, args) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: \"note\",\n            id: \"LIST\"\n          }, ...result.ids.map(id => ({\n            type: \"note\",\n            id\n          }))];\n        } else return [{\n          type: \"note\",\n          id: \"LIST\"\n        }];\n      }\n    }),\n    // ADD NEW NOTE\n    addNewNote: builder.mutation({\n      // takes note data param\n      query: initialNoteData => ({\n        url: \"/notes\",\n        method: \"POST\",\n        body: {\n          ...initialNoteData\n        }\n      }),\n      // invalidatesTags to update the state/cache when objects below change.\n      invalidatesTags: [{\n        type: \"Note\",\n        id: \"LIST\"\n      }]\n    }),\n    // UPDATE NOTE\n    updateNote: builder.mutation({\n      // takes note data param\n      query: initialNoteData => ({\n        url: \"/notes\",\n        method: \"PATCH\",\n        body: {\n          ...initialNoteData\n        }\n      }),\n      // invalidatesTags arg param to get the id and use it to invalid only the note id\n      invalidatesTags: (result, error, arg) => [{\n        type: \"Note\",\n        id: arg.id\n      }]\n    }),\n    // DELETE NOTE\n    deleteNote: builder.mutation({\n      // takes id object\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `notes`,\n          method: \"DELETE\",\n          body: {\n            id\n          }\n        };\n      },\n      // invalidatesTags uses arg param to get the id and use it to invalid only the note id\n      invalidatesTags: (result, error, arg) => [{\n        type: \"Note\",\n        id: arg.id\n      }]\n    })\n  })\n});\n\n// Export endpoints\nexport const {\n  useGetNotesQuery,\n  useAddNewNoteMutation,\n  useUpdateNoteMutation,\n  useDeleteNoteMutation\n} = notesApiSlice;\n\n// returns the query result object\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select();\n\n// create normalized selector\nconst selectNotesData = createSelector(selectNotesResult, noteResult => noteResult.data // normalized state object with ids and entities\n);\n\n// getSelectors create these selectors and we rename the with alias\n// using destructuring\nexport const {\n  selectAll: selectAllNotes,\n  selectById: selectNoteById,\n  selectIds: selectNoteIds\n} = noteAdapter.getSelectors(state => {\n  var _selectNotesData;\n  return (_selectNotesData = selectNotesData(state)) !== null && _selectNotesData !== void 0 ? _selectNotesData : initialSate;\n});","map":{"version":3,"names":["createEntityAdapter","createSelector","apiSlice","noteAdapter","sortComparer","a","b","completed","initialSate","getInitialState","notesApiSlice","injectEndpoints","endpoints","builder","getNotes","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadNotes","map","note","id","_id","setAll","providesTags","error","args","ids","type","addNewNote","mutation","initialNoteData","url","method","body","invalidatesTags","updateNote","arg","deleteNote","useGetNotesQuery","useAddNewNoteMutation","useUpdateNoteMutation","useDeleteNoteMutation","selectNotesResult","select","selectNotesData","noteResult","data","selectAll","selectAllNotes","selectById","selectNoteById","selectIds","selectNoteIds","getSelectors","state"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/notes/notesApiSlice.js"],"sourcesContent":["import { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\n// LEARN MORE ABOUT createEntityAdapter/ using ids to get data from entities\nconst noteAdapter = createEntityAdapter({\n  // sorting notes by completed or open status\n  sortComparer: (a, b) =>\n    a.completed === b.completed ? 0 : a.completed ? 1 : -1,\n});\nconst initialSate = noteAdapter.getInitialState();\n\nexport const notesApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    getNotes: builder.query({\n      query: () => \"/notes\",\n      // validating status\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      //   since using mongoDB have to set id to use createEntityAdapter\n      //   so the data can be stored as ids and entities\n      transformResponse: (responseData) => {\n        const loadNotes = responseData.map((note) => {\n          note.id = note._id;\n          return note;\n        });\n        return noteAdapter.setAll(initialSate, loadNotes);\n      },\n      providesTags: (result, error, args) => {\n        if (result?.ids) {\n          return [\n            { type: \"note\", id: \"LIST\" },\n            ...result.ids.map((id) => ({ type: \"note\", id })),\n          ];\n        } else return [{ type: \"note\", id: \"LIST\" }];\n      },\n    }),\n    // ADD NEW NOTE\n    addNewNote: builder.mutation({\n      // takes note data param\n      query: (initialNoteData) => ({\n        url: \"/notes\",\n        method: \"POST\",\n        body: {\n          ...initialNoteData,\n        },\n      }),\n      // invalidatesTags to update the state/cache when objects below change.\n      invalidatesTags: [{ type: \"Note\", id: \"LIST\" }],\n    }),\n    // UPDATE NOTE\n    updateNote: builder.mutation({\n      // takes note data param\n      query: (initialNoteData) => ({\n        url: \"/notes\",\n        method: \"PATCH\",\n        body: {\n          ...initialNoteData,\n        },\n      }),\n      // invalidatesTags arg param to get the id and use it to invalid only the note id\n      invalidatesTags: (result, error, arg) => [{ type: \"Note\", id: arg.id }],\n    }),\n    // DELETE NOTE\n    deleteNote: builder.mutation({\n      // takes id object\n      query: ({ id }) => ({\n        url: `notes`,\n        method: \"DELETE\",\n        body: { id },\n      }),\n      // invalidatesTags uses arg param to get the id and use it to invalid only the note id\n      invalidatesTags: (result, error, arg) => [{ type: \"Note\", id: arg.id }],\n    }),\n  }),\n});\n\n// Export endpoints\nexport const {\n  useGetNotesQuery,\n  useAddNewNoteMutation,\n  useUpdateNoteMutation,\n  useDeleteNoteMutation,\n} = notesApiSlice;\n\n// returns the query result object\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select();\n\n// create normalized selector\nconst selectNotesData = createSelector(\n  selectNotesResult,\n  (noteResult) => noteResult.data // normalized state object with ids and entities\n);\n\n// getSelectors create these selectors and we rename the with alias\n// using destructuring\nexport const {\n  selectAll: selectAllNotes,\n  selectById: selectNoteById,\n  selectIds: selectNoteIds,\n} = noteAdapter.getSelectors((state) => selectNotesData(state) ?? initialSate);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}