{"ast":null,"code":"import { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\n// LEARN MORE ABOUT createEntityAdapter/ using ids to get data from entities\nconst userAdapter = createEntityAdapter({});\nconst initialSate = userAdapter.getInitialState();\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    // GET ALL USERS\n    getUsers: builder.query({\n      query: () => \"/users\",\n      // validating status\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      //   since using mongoDB have to set id to use createEntityAdapter\n      //   so the data can be stored as ids and entities\n      transformResponse: responseData => {\n        const loadUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return userAdapter.setAll(initialSate, loadUsers);\n      },\n      // Referencing the tags they can be invalidated when mutations to data take place\n      providesTags: (result, error, args) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: \"User\",\n            id: \"LIST\"\n          }, ...result.ids.map(id => ({\n            type: \"User\",\n            id\n          }))];\n        } else return [{\n          type: \"user\",\n          id: \"LIST\"\n        }];\n      }\n    }),\n    // ADD NEW USER\n    addNewUser: builder.mutation({\n      // takes user data param\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"POST\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      // invalidatesTags to update the state/cache when objects below change.\n      invalidatesTags: [{\n        type: \"User\",\n        id: \"LIST\"\n      }]\n    }),\n    // UPDATE USER\n    updateUser: builder.mutation({\n      // takes user data param\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"PATCH\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      // invalidatesTags arg param to get the id and use it to invalid only the user id\n      invalidatesTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    }),\n    // DELETE USER\n    deleteUser: builder.mutation({\n      // takes id object\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `users`,\n          method: \"DELETE\",\n          body: {\n            id\n          }\n        };\n      },\n      // invalidatesTags uses arg param to get the id and use it to invalid only the user id\n      invalidatesTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    })\n  })\n});\n\n// Exporting endpoints\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation\n} = usersApiSlice;\n\n// Returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// Create normalized selector\nconst selectUsersData = createSelector(selectUsersResult, userResult => userResult.data // normalized state object with ids and entities\n);\n\n// getSelectors create these selectors and we rename the with alias\n// using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds\n} = userAdapter.getSelectors(state => {\n  var _selectUsersData;\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialSate;\n});","map":{"version":3,"names":["createEntityAdapter","createSelector","apiSlice","userAdapter","initialSate","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadUsers","map","user","id","_id","setAll","providesTags","error","args","ids","type","addNewUser","mutation","initialUserData","url","method","body","invalidatesTags","updateUser","arg","deleteUser","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","userResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/users/usersApiSlice.js"],"sourcesContent":["import { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\n// LEARN MORE ABOUT createEntityAdapter/ using ids to get data from entities\nconst userAdapter = createEntityAdapter({});\nconst initialSate = userAdapter.getInitialState();\n\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    // GET ALL USERS\n    getUsers: builder.query({\n      query: () => \"/users\",\n      // validating status\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n\n      //   since using mongoDB have to set id to use createEntityAdapter\n      //   so the data can be stored as ids and entities\n      transformResponse: (responseData) => {\n        const loadUsers = responseData.map((user) => {\n          user.id = user._id;\n          return user;\n        });\n        return userAdapter.setAll(initialSate, loadUsers);\n      },\n      // Referencing the tags they can be invalidated when mutations to data take place\n      providesTags: (result, error, args) => {\n        if (result?.ids) {\n          return [\n            { type: \"User\", id: \"LIST\" },\n            ...result.ids.map((id) => ({ type: \"User\", id })),\n          ];\n        } else return [{ type: \"user\", id: \"LIST\" }];\n      },\n    }),\n    // ADD NEW USER\n    addNewUser: builder.mutation({\n      // takes user data param\n      query: (initialUserData) => ({\n        url: \"/users\",\n        method: \"POST\",\n        body: {\n          ...initialUserData,\n        },\n      }),\n      // invalidatesTags to update the state/cache when objects below change.\n      invalidatesTags: [{ type: \"User\", id: \"LIST\" }],\n    }),\n    // UPDATE USER\n    updateUser: builder.mutation({\n      // takes user data param\n      query: (initialUserData) => ({\n        url: \"/users\",\n        method: \"PATCH\",\n        body: {\n          ...initialUserData,\n        },\n      }),\n      // invalidatesTags arg param to get the id and use it to invalid only the user id\n      invalidatesTags: (result, error, arg) => [{ type: \"User\", id: arg.id }],\n    }),\n    // DELETE USER\n    deleteUser: builder.mutation({\n      // takes id object\n      query: ({ id }) => ({\n        url: `users`,\n        method: \"DELETE\",\n        body: { id },\n      }),\n      // invalidatesTags uses arg param to get the id and use it to invalid only the user id\n      invalidatesTags: (result, error, arg) => [{ type: \"User\", id: arg.id }],\n    }),\n  }),\n});\n\n// Exporting endpoints\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation,\n} = usersApiSlice;\n\n// Returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// Create normalized selector\nconst selectUsersData = createSelector(\n  selectUsersResult,\n  (userResult) => userResult.data // normalized state object with ids and entities\n);\n\n// getSelectors create these selectors and we rename the with alias\n// using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds,\n} = userAdapter.getSelectors((state) => selectUsersData(state) ?? initialSate);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}