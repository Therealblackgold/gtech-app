{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// creating a baseQuery and setting headers\nconst baseQuery = fetchBaseQuery({\n  baseUrl: \"http://localhost:3001\",\n  credentials: \"include\",\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    const token = getState().auth.token;\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    return headers;\n  }\n});\nconst BaseQueryWithReauth = async (args, api, extraOptions) => {\n  var _result$error;\n  let result = await baseQuery(args, api, extraOptions);\n  if ((result === null || result === void 0 ? void 0 : (_result$error = result.error) === null || _result$error === void 0 ? void 0 : _result$error.status) === 403) {\n    console.log(\"sending refresh token\");\n\n    // send refresh token to get new access\n    const refreshResult = await baseQuery(\"/auth/refresh\", api, extraOptions);\n    if (refreshResult !== null && refreshResult !== void 0 && refreshResult.data) {\n      //\n    }\n  }\n};\n_c = BaseQueryWithReauth;\nexport const apiSlice = createApi({\n  baseQuery,\n  tagTypes: [\"Note\", \"User\"],\n  endpoints: builder => ({})\n});\nvar _c;\n$RefreshReg$(_c, \"BaseQueryWithReauth\");","map":{"version":3,"names":["createApi","fetchBaseQuery","baseQuery","baseUrl","credentials","prepareHeaders","headers","getState","token","auth","set","BaseQueryWithReauth","args","api","extraOptions","result","error","status","console","log","refreshResult","data","apiSlice","tagTypes","endpoints","builder"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/app/api/apiSlice.jsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// creating a baseQuery and setting headers\nconst baseQuery = fetchBaseQuery({\n  baseUrl: \"http://localhost:3001\",\n  credentials: \"include\",\n  prepareHeaders: (headers, { getState }) => {\n    const token = getState().auth.token;\n\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    return headers;\n  },\n});\n\nconst BaseQueryWithReauth = async (args, api, extraOptions) => {\n  let result = await baseQuery(args, api, extraOptions);\n\n  if (result?.error?.status === 403) {\n    console.log(\"sending refresh token\");\n\n    // send refresh token to get new access\n    const refreshResult = await baseQuery(\"/auth/refresh\", api, extraOptions);\n\n    if (refreshResult?.data) {\n      //\n    }\n  }\n};\n\nexport const apiSlice = createApi({\n  baseQuery,\n  tagTypes: [\"Note\", \"User\"],\n  endpoints: (builder) => ({}),\n});\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;;AAExE;AACA,MAAMC,SAAS,GAAGD,cAAc,CAAC;EAC/BE,OAAO,EAAE,uBAAuB;EAChCC,WAAW,EAAE,SAAS;EACtBC,cAAc,EAAE,CAACC,OAAO,WAAmB;IAAA,IAAjB;MAAEC;IAAS,CAAC;IACpC,MAAMC,KAAK,GAAGD,QAAQ,EAAE,CAACE,IAAI,CAACD,KAAK;IAEnC,IAAIA,KAAK,EAAE;MACTF,OAAO,CAACI,GAAG,CAAC,eAAe,EAAG,UAASF,KAAM,EAAC,CAAC;IACjD;IACA,OAAOF,OAAO;EAChB;AACF,CAAC,CAAC;AAEF,MAAMK,mBAAmB,GAAG,OAAOC,IAAI,EAAEC,GAAG,EAAEC,YAAY,KAAK;EAAA;EAC7D,IAAIC,MAAM,GAAG,MAAMb,SAAS,CAACU,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;EAErD,IAAI,CAAAC,MAAM,aAANA,MAAM,wCAANA,MAAM,CAAEC,KAAK,kDAAb,cAAeC,MAAM,MAAK,GAAG,EAAE;IACjCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;IAEpC;IACA,MAAMC,aAAa,GAAG,MAAMlB,SAAS,CAAC,eAAe,EAAEW,GAAG,EAAEC,YAAY,CAAC;IAEzE,IAAIM,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEC,IAAI,EAAE;MACvB;IAAA;EAEJ;AACF,CAAC;AAAC,KAbIV,mBAAmB;AAezB,OAAO,MAAMW,QAAQ,GAAGtB,SAAS,CAAC;EAChCE,SAAS;EACTqB,QAAQ,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EAC1BC,SAAS,EAAGC,OAAO,KAAM,CAAC,CAAC;AAC7B,CAAC,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}