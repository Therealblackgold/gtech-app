{"ast":null,"code":"var _jsxFileName = \"/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/auth/PersistLogin.jsx\",\n  _s = $RefreshSig$();\nimport { Outlet, Link } from \"react-router-dom\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useRefreshMutation } from \"./authApiSlice\";\nimport usePersist from \"../../hooks/usePersist\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentToken } from \"./authSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PersistLogin = () => {\n  _s();\n  // state values\n  const [persist] = usePersist();\n  const token = useSelector(selectCurrentToken);\n\n  // effectRan will be used to bypass strict mode default mounting and unmount behavior\n  const effectRan = useRef(false);\n\n  // trueSuccess will be set once credentials are set so data can be displayed in components\n  const [trueSuccess, setTrueSuccess] = useState(false);\n\n  // getting useRefreshMutation() state values\n  const [refresh, {\n    isUninitialized,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  }] = useRefreshMutation();\n  useEffect(() => {\n    if (effectRan.current === true || process.env.NODE_ENV !== \"development\") {\n      // React 18 Strict Mode only runs in development\n\n      const verifyRefreshToken = async () => {\n        console.log(\"verifying refresh token\");\n        try {\n          //const response =\n          await refresh();\n          //const { accessToken } = response.data\n          setTrueSuccess(true);\n        } catch (err) {\n          console.error(err);\n        }\n      };\n\n      // if there is no token when page is refreshed and persist is true run  verifyRefreshToken() to get access to the state with a new access token\n      if (!token && persist) verifyRefreshToken();\n    }\n    // only setting true when effectRan runs the first time\n    // so effectRan stores value when component mounts and remounts\n    return () => effectRan.current = true;\n\n    // below here we disable dependencies to avoid warnings since this function should only run once and takes not dependencies.\n\n    // eslint-disable-next-line\n  }, []);\n  let content;\n  if (!persist) {\n    // persist: no\n    console.log(\"no persist\");\n    content = /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }, this);\n  } else if (isLoading) {\n    //persist: yes, token: no\n    console.log(\"loading\");\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }, this);\n  } else if (isError) {\n    var _error$data;\n    //persist: yes, token: no\n    console.log(\"error\");\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errmsg\",\n      children: [`${error === null || error === void 0 ? void 0 : (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.message} - `, /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/login\",\n        children: \"Please login again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  } else if (isSuccess && trueSuccess) {\n    //persist: yes, token: yes\n    console.log(\"success\");\n    content = /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }, this);\n  } else if (token && isUninitialized) {\n    //persist: yes, token: yes\n    console.log(\"token and uninit\");\n    console.log(isUninitialized);\n    content = /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }, this);\n  }\n  return content;\n};\n_s(PersistLogin, \"NNFL3hMJ8SQj6ZJuLpze3PXTqd8=\", false, function () {\n  return [usePersist, useSelector, useRefreshMutation];\n});\n_c = PersistLogin;\nexport default PersistLogin;\nvar _c;\n$RefreshReg$(_c, \"PersistLogin\");","map":{"version":3,"names":["Outlet","Link","useEffect","useRef","useState","useRefreshMutation","usePersist","useSelector","selectCurrentToken","PersistLogin","persist","token","effectRan","trueSuccess","setTrueSuccess","refresh","isUninitialized","isLoading","isSuccess","isError","error","current","process","env","NODE_ENV","verifyRefreshToken","console","log","err","content","data","message"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/auth/PersistLogin.jsx"],"sourcesContent":["import { Outlet, Link } from \"react-router-dom\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useRefreshMutation } from \"./authApiSlice\";\nimport usePersist from \"../../hooks/usePersist\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentToken } from \"./authSlice\";\n\nconst PersistLogin = () => {\n  // state values\n  const [persist] = usePersist();\n  const token = useSelector(selectCurrentToken);\n\n  // effectRan will be used to bypass strict mode default mounting and unmount behavior\n  const effectRan = useRef(false);\n\n  // trueSuccess will be set once credentials are set so data can be displayed in components\n  const [trueSuccess, setTrueSuccess] = useState(false);\n\n  // getting useRefreshMutation() state values\n  const [refresh, { isUninitialized, isLoading, isSuccess, isError, error }] =\n    useRefreshMutation();\n\n  useEffect(() => {\n    if (effectRan.current === true || process.env.NODE_ENV !== \"development\") {\n      // React 18 Strict Mode only runs in development\n\n      const verifyRefreshToken = async () => {\n        console.log(\"verifying refresh token\");\n        try {\n          //const response =\n          await refresh();\n          //const { accessToken } = response.data\n          setTrueSuccess(true);\n        } catch (err) {\n          console.error(err);\n        }\n      };\n\n      // if there is no token when page is refreshed and persist is true run  verifyRefreshToken() to get access to the state with a new access token\n      if (!token && persist) verifyRefreshToken();\n    }\n    // only setting true when effectRan runs the first time\n    // so effectRan stores value when component mounts and remounts\n    return () => (effectRan.current = true);\n\n    // below here we disable dependencies to avoid warnings since this function should only run once and takes not dependencies.\n\n    // eslint-disable-next-line\n  }, []);\n\n  let content;\n  if (!persist) {\n    // persist: no\n    console.log(\"no persist\");\n    content = <Outlet />;\n  } else if (isLoading) {\n    //persist: yes, token: no\n    console.log(\"loading\");\n    content = <p>Loading...</p>;\n  } else if (isError) {\n    //persist: yes, token: no\n    console.log(\"error\");\n    content = (\n      <p className=\"errmsg\">\n        {`${error?.data?.message} - `}\n        <Link to=\"/login\">Please login again</Link>.\n      </p>\n    );\n  } else if (isSuccess && trueSuccess) {\n    //persist: yes, token: yes\n    console.log(\"success\");\n    content = <Outlet />;\n  } else if (token && isUninitialized) {\n    //persist: yes, token: yes\n    console.log(\"token and uninit\");\n    console.log(isUninitialized);\n    content = <Outlet />;\n  }\n\n  return content;\n};\nexport default PersistLogin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}