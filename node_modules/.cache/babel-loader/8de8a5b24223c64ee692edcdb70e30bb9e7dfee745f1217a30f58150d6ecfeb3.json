{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentToken } from \"../Features/auth/authSlice\";\nimport jwtDecode from \"jwt-decode\";\nconst useAuth = () => {\n  _s();\n  // getting token from electCurrentToken\n  const token = useSelector(selectCurrentToken);\n  // state values\n  let isManager = false;\n  let isAdmin = false;\n  let status = \"Employee\";\n\n  // if user has a token\n  if (token) {\n    // decode the token\n    const decoded = jwtDecode(token);\n\n    // destructure username and roles stored inside the access token stored as UserInfo in the backend\n    const {\n      username,\n      roles\n    } = decoded.UserInfo;\n\n    // set values that can be used to confirm user roles\n    isManager = roles.includes(\"Manager\");\n    isAdmin = roles.includes(\"Admin\");\n\n    // using values above to verify user roles\n    if (isManager) status = \"Manager\";\n    if (isAdmin) status = \"Admin\";\n\n    // then returning values so they can be used inside components\n    return {\n      username,\n      roles,\n      status,\n      isManager,\n      isAdmin\n    };\n  }\n\n  // return if theres no token\n  return {\n    username: \"\",\n    roles: [],\n    isManager,\n    isAdmin,\n    status\n  };\n};\n_s(useAuth, \"bD5+gKbiITcJRDYAIJK4ZSEgato=\", false, function () {\n  return [useSelector];\n});\nexport default useAuth;","map":{"version":3,"names":["useSelector","selectCurrentToken","jwtDecode","useAuth","token","isManager","isAdmin","status","decoded","username","roles","UserInfo","includes"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/hooks/useAuth.jsx"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { selectCurrentToken } from \"../Features/auth/authSlice\";\nimport jwtDecode from \"jwt-decode\";\n\nconst useAuth = () => {\n  // getting token from electCurrentToken\n  const token = useSelector(selectCurrentToken);\n  // state values\n  let isManager = false;\n  let isAdmin = false;\n  let status = \"Employee\";\n\n  // if user has a token\n  if (token) {\n    // decode the token\n    const decoded = jwtDecode(token);\n\n    // destructure username and roles stored inside the access token stored as UserInfo in the backend\n    const { username, roles } = decoded.UserInfo;\n\n    // set values that can be used to confirm user roles\n    isManager = roles.includes(\"Manager\");\n    isAdmin = roles.includes(\"Admin\");\n\n    // using values above to verify user roles\n    if (isManager) status = \"Manager\";\n    if (isAdmin) status = \"Admin\";\n\n    // then returning values so they can be used inside components\n    return { username, roles, status, isManager, isAdmin };\n  }\n\n  // return if theres no token\n  return { username: \"\", roles: [], isManager, isAdmin, status };\n};\nexport default useAuth;\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,OAAO,GAAG,MAAM;EAAA;EACpB;EACA,MAAMC,KAAK,GAAGJ,WAAW,CAACC,kBAAkB,CAAC;EAC7C;EACA,IAAII,SAAS,GAAG,KAAK;EACrB,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIC,MAAM,GAAG,UAAU;;EAEvB;EACA,IAAIH,KAAK,EAAE;IACT;IACA,MAAMI,OAAO,GAAGN,SAAS,CAACE,KAAK,CAAC;;IAEhC;IACA,MAAM;MAAEK,QAAQ;MAAEC;IAAM,CAAC,GAAGF,OAAO,CAACG,QAAQ;;IAE5C;IACAN,SAAS,GAAGK,KAAK,CAACE,QAAQ,CAAC,SAAS,CAAC;IACrCN,OAAO,GAAGI,KAAK,CAACE,QAAQ,CAAC,OAAO,CAAC;;IAEjC;IACA,IAAIP,SAAS,EAAEE,MAAM,GAAG,SAAS;IACjC,IAAID,OAAO,EAAEC,MAAM,GAAG,OAAO;;IAE7B;IACA,OAAO;MAAEE,QAAQ;MAAEC,KAAK;MAAEH,MAAM;MAAEF,SAAS;MAAEC;IAAQ,CAAC;EACxD;;EAEA;EACA,OAAO;IAAEG,QAAQ,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEL,SAAS;IAAEC,OAAO;IAAEC;EAAO,CAAC;AAChE,CAAC;AAAC,GA9BIJ,OAAO;EAAA,QAEGH,WAAW;AAAA;AA6B3B,eAAeG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}