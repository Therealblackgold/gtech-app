{"ast":null,"code":"import { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\n// LEARN MORE ABOUT createEntityAdapter/ using ids to get data from entities\nconst userAdapter = createEntityAdapter({});\nconst initialSate = userAdapter.getInitialState();\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => \"/users\",\n      // validating status\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      // remove this in deployment\n      keepUnusedDataFor: 5,\n      //   since using mongoDB have to set id to use createEntityAdapter\n      //   so the data can be stored as ids and entities\n      transformResponse: responseData => {\n        const loadUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return userAdapter.setAll(initialSate, loadUsers);\n      },\n      providesTags: (result, error, args) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: \"User\",\n            id: \"LIST\"\n          }, ...result.ids.map(id => ({\n            type: \"User\",\n            id\n          }))];\n        } else return [{\n          type: \"user\",\n          id: \"LIST\"\n        }];\n      }\n    })\n  })\n});\nexport const {\n  useGetUsersQuery\n} = usersApiSlice;\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// create normalized selector\nconst selectUsersData = createSelector(selectUsersResult, userResult => userResult.data // normalized state object with ids and entities\n);\n\n// getSelectors create these selectors and we rename the with alias\n// using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds\n} = userAdapter.getSelectors(state => {\n  var _selectUsersData;\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialSate;\n});","map":{"version":3,"names":["createEntityAdapter","createSelector","apiSlice","userAdapter","initialSate","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","validateStatus","response","result","status","isError","keepUnusedDataFor","transformResponse","responseData","loadUsers","map","user","id","_id","setAll","providesTags","error","args","ids","type","useGetUsersQuery","selectUsersResult","select","selectUsersData","userResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/users/usersApiSlice.js"],"sourcesContent":["import { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\n// LEARN MORE ABOUT createEntityAdapter/ using ids to get data from entities\nconst userAdapter = createEntityAdapter({});\nconst initialSate = userAdapter.getInitialState();\n\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    getUsers: builder.query({\n      query: () => \"/users\",\n      // validating status\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      // remove this in deployment\n      keepUnusedDataFor: 5,\n      //   since using mongoDB have to set id to use createEntityAdapter\n      //   so the data can be stored as ids and entities\n      transformResponse: (responseData) => {\n        const loadUsers = responseData.map((user) => {\n          user.id = user._id;\n          return user;\n        });\n        return userAdapter.setAll(initialSate, loadUsers);\n      },\n      providesTags: (result, error, args) => {\n        if (result?.ids) {\n          return [\n            { type: \"User\", id: \"LIST\" },\n            ...result.ids.map((id) => ({ type: \"User\", id })),\n          ];\n        } else return [{ type: \"user\", id: \"LIST\" }];\n      },\n    }),\n  }),\n});\n\nexport const { useGetUsersQuery } = usersApiSlice;\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// create normalized selector\nconst selectUsersData = createSelector(\n  selectUsersResult,\n  (userResult) => userResult.data // normalized state object with ids and entities\n);\n\n// getSelectors create these selectors and we rename the with alias\n// using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds,\n} = userAdapter.getSelectors((state) => selectUsersData(state) ?? initialSate);\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,SAASC,QAAQ,QAAQ,wBAAwB;;AAEjD;AACA,MAAMC,WAAW,GAAGH,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAC3C,MAAMI,WAAW,GAAGD,WAAW,CAACE,eAAe,EAAE;AAEjD,OAAO,MAAMC,aAAa,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACpDC,SAAS,EAAGC,OAAO,KAAM;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAE,MAAM,QAAQ;MACrB;MACAC,cAAc,EAAE,CAACC,QAAQ,EAAEC,MAAM,KAAK;QACpC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;MACnD,CAAC;MACD;MACAC,iBAAiB,EAAE,CAAC;MACpB;MACA;MACAC,iBAAiB,EAAGC,YAAY,IAAK;QACnC,MAAMC,SAAS,GAAGD,YAAY,CAACE,GAAG,CAAEC,IAAI,IAAK;UAC3CA,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACE,GAAG;UAClB,OAAOF,IAAI;QACb,CAAC,CAAC;QACF,OAAOnB,WAAW,CAACsB,MAAM,CAACrB,WAAW,EAAEgB,SAAS,CAAC;MACnD,CAAC;MACDM,YAAY,EAAE,CAACZ,MAAM,EAAEa,KAAK,EAAEC,IAAI,KAAK;QACrC,IAAId,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEe,GAAG,EAAE;UACf,OAAO,CACL;YAAEC,IAAI,EAAE,MAAM;YAAEP,EAAE,EAAE;UAAO,CAAC,EAC5B,GAAGT,MAAM,CAACe,GAAG,CAACR,GAAG,CAAEE,EAAE,KAAM;YAAEO,IAAI,EAAE,MAAM;YAAEP;UAAG,CAAC,CAAC,CAAC,CAClD;QACH,CAAC,MAAM,OAAO,CAAC;UAAEO,IAAI,EAAE,MAAM;UAAEP,EAAE,EAAE;QAAO,CAAC,CAAC;MAC9C;IACF,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEQ;AAAiB,CAAC,GAAGzB,aAAa;;AAEjD;AACA,OAAO,MAAM0B,iBAAiB,GAAG1B,aAAa,CAACE,SAAS,CAACE,QAAQ,CAACuB,MAAM,EAAE;;AAE1E;AACA,MAAMC,eAAe,GAAGjC,cAAc,CACpC+B,iBAAiB,EAChBG,UAAU,IAAKA,UAAU,CAACC,IAAI,CAAC;AAAA,CACjC;;AAED;AACA;AACA,OAAO,MAAM;EACXC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;AACb,CAAC,GAAGvC,WAAW,CAACwC,YAAY,CAAEC,KAAK;EAAA;EAAA,2BAAKV,eAAe,CAACU,KAAK,CAAC,+DAAIxC,WAAW;AAAA,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}