{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentToken } from \"../Features/auth/authSlice\";\nimport jwtDecode from \"jwt-decode\";\nconst useAuth = () => {\n  _s();\n  const token = useSelector(selectCurrentToken);\n  let isManager = false;\n  let isAdmin = false;\n  let status = \"Employee\";\n  if (token) {\n    const decoded = jwtDecode(token);\n    // destructuring {username,roles} from decoded.UserInfo as its named in the backend\n    const {\n      username,\n      roles\n    } = decoded.UserInfo;\n\n    // checking roles\n    isManager = roles.includes(\"Manager\");\n    isAdmin = roles.includes(\"Admin\");\n\n    // setting status checking isAdmin last so it can overwrites isManager\n    if (isManager) status = \"Manager\";\n    if (isAdmin) status = \"Admin\";\n    return {\n      username,\n      roles,\n      isManager,\n      isAdmin,\n      status\n    };\n  }\n  return {\n    username: \"\",\n    roles: [],\n    isManager,\n    isAdmin,\n    status\n  };\n};\n_s(useAuth, \"bD5+gKbiITcJRDYAIJK4ZSEgato=\", false, function () {\n  return [useSelector];\n});\nexport default useAuth;","map":{"version":3,"names":["useSelector","selectCurrentToken","jwtDecode","useAuth","token","isManager","isAdmin","status","decoded","username","roles","UserInfo","includes"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/hooks/useAuth.jsx"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { selectCurrentToken } from \"../Features/auth/authSlice\";\nimport jwtDecode from \"jwt-decode\";\n\nconst useAuth = () => {\n  const token = useSelector(selectCurrentToken);\n  let isManager = false;\n  let isAdmin = false;\n  let status = \"Employee\";\n\n  if (token) {\n    const decoded = jwtDecode(token);\n    // destructuring {username,roles} from decoded.UserInfo as its named in the backend\n    const { username, roles } = decoded.UserInfo;\n\n    // checking roles\n    isManager = roles.includes(\"Manager\");\n    isAdmin = roles.includes(\"Admin\");\n\n    // setting status checking isAdmin last so it can overwrites isManager\n    if (isManager) status = \"Manager\";\n    if (isAdmin) status = \"Admin\";\n\n    return { username, roles, isManager, isAdmin, status };\n  }\n\n  return { username: \"\", roles: [], isManager, isAdmin, status };\n};\n\nexport default useAuth;\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,OAAO,GAAG,MAAM;EAAA;EACpB,MAAMC,KAAK,GAAGJ,WAAW,CAACC,kBAAkB,CAAC;EAC7C,IAAII,SAAS,GAAG,KAAK;EACrB,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIC,MAAM,GAAG,UAAU;EAEvB,IAAIH,KAAK,EAAE;IACT,MAAMI,OAAO,GAAGN,SAAS,CAACE,KAAK,CAAC;IAChC;IACA,MAAM;MAAEK,QAAQ;MAAEC;IAAM,CAAC,GAAGF,OAAO,CAACG,QAAQ;;IAE5C;IACAN,SAAS,GAAGK,KAAK,CAACE,QAAQ,CAAC,SAAS,CAAC;IACrCN,OAAO,GAAGI,KAAK,CAACE,QAAQ,CAAC,OAAO,CAAC;;IAEjC;IACA,IAAIP,SAAS,EAAEE,MAAM,GAAG,SAAS;IACjC,IAAID,OAAO,EAAEC,MAAM,GAAG,OAAO;IAE7B,OAAO;MAAEE,QAAQ;MAAEC,KAAK;MAAEL,SAAS;MAAEC,OAAO;MAAEC;IAAO,CAAC;EACxD;EAEA,OAAO;IAAEE,QAAQ,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEL,SAAS;IAAEC,OAAO;IAAEC;EAAO,CAAC;AAChE,CAAC;AAAC,GAvBIJ,OAAO;EAAA,QACGH,WAAW;AAAA;AAwB3B,eAAeG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}