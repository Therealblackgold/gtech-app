{"ast":null,"code":"import { apiSlice } from \"../../app/api/apiSlice\";\nimport { logOut, setCredentials } from \"./authSlice\";\n\n// On this file we extend the apiSlice creating endpoints\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    // LOGIN\n    login: builder.mutation({\n      // credentials are the username and password that is sent with the query to \"/auth\" route\n      query: credentials => ({\n        url: \"/auth\",\n        method: \"POST\",\n        // spreading credentials to the body object\n        body: {\n          ...credentials\n        }\n      })\n    }),\n    // LOGOUT\n    sendLogout: builder.mutation({\n      query: () => ({\n        url: \"/auth/logout\",\n        method: \"POST\"\n      }),\n      // using RTK QUERY onQueryStarted function to dispatch and verify the query has been fulfilled\n      async onQueryStarted(arg, _ref) {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref;\n        try {\n          const {\n            data\n          } = await queryFulfilled;\n          console.log(data);\n          // calling logOut from authSlice\n          dispatch(logOut());\n          setTimeout(() => {\n            // reset state\n            dispatch(apiSlice.util.resetApiState());\n          }, 1000);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }),\n    // REFRESHING TOKEN\n    refresh: builder.mutation({\n      query: () => ({\n        url: \"/auth/refresh\",\n        method: \"GET\"\n      }),\n      // just like the logout we just send a request to the backend end point so just need to make sure its fulfilled.\n      // using RTK QUERY onQueryStarted function to dispatch and verify the query has been fulfilled\n      async onQueryStarted(arg, _ref2) {\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref2;\n        try {\n          const {\n            data\n          } = await queryFulfilled;\n          const {\n            accessToken\n          } = data;\n          // this use of dispatch will setCredentials instead of importing dispatch on every component that uses the useRefreshMutation\n          dispatch(setCredentials({\n            accessToken\n          }));\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    })\n  })\n});\n\n// exporting mutations\nexport const {\n  useLoginMutation,\n  useSendLogoutMutation,\n  useRefreshMutation\n} = authApiSlice;","map":{"version":3,"names":["apiSlice","logOut","setCredentials","authApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","method","body","sendLogout","onQueryStarted","arg","dispatch","queryFulfilled","data","console","log","setTimeout","util","resetApiState","err","refresh","accessToken","error","useLoginMutation","useSendLogoutMutation","useRefreshMutation"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/auth/authApiSlice.jsx"],"sourcesContent":["import { apiSlice } from \"../../app/api/apiSlice\";\nimport { logOut, setCredentials } from \"./authSlice\";\n\n// On this file we extend the apiSlice creating endpoints\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    // LOGIN\n    login: builder.mutation({\n      // credentials are the username and password that is sent with the query to \"/auth\" route\n      query: (credentials) => ({\n        url: \"/auth\",\n        method: \"POST\",\n        // spreading credentials to the body object\n        body: { ...credentials },\n      }),\n    }),\n    // LOGOUT\n    sendLogout: builder.mutation({\n      query: () => ({\n        url: \"/auth/logout\",\n        method: \"POST\",\n      }),\n      // using RTK QUERY onQueryStarted function to dispatch and verify the query has been fulfilled\n      async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          console.log(data);\n          // calling logOut from authSlice\n          dispatch(logOut());\n          setTimeout(() => {\n            // reset state\n            dispatch(apiSlice.util.resetApiState());\n          }, 1000);\n        } catch (err) {\n          console.log(err);\n        }\n      },\n    }),\n    // REFRESHING TOKEN\n    refresh: builder.mutation({\n      query: () => ({\n        url: \"/auth/refresh\",\n        method: \"GET\",\n      }),\n      // just like the logout we just send a request to the backend end point so just need to make sure its fulfilled.\n      // using RTK QUERY onQueryStarted function to dispatch and verify the query has been fulfilled\n      async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          const { accessToken } = data;\n          // this use of dispatch will setCredentials instead of importing dispatch on every component that uses the useRefreshMutation\n          dispatch(setCredentials({ accessToken }));\n        } catch (error) {\n          console.log(error);\n        }\n      },\n    }),\n  }),\n});\n\n// exporting mutations\nexport const { useLoginMutation, useSendLogoutMutation, useRefreshMutation } =\n  authApiSlice;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,MAAM,EAAEC,cAAc,QAAQ,aAAa;;AAEpD;;AAEA,OAAO,MAAMC,YAAY,GAAGH,QAAQ,CAACI,eAAe,CAAC;EACnDC,SAAS,EAAGC,OAAO,KAAM;IACvB;IACAC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;MACtB;MACAC,KAAK,EAAGC,WAAW,KAAM;QACvBC,GAAG,EAAE,OAAO;QACZC,MAAM,EAAE,MAAM;QACd;QACAC,IAAI,EAAE;UAAE,GAAGH;QAAY;MACzB,CAAC;IACH,CAAC,CAAC;IACF;IACAI,UAAU,EAAER,OAAO,CAACE,QAAQ,CAAC;MAC3BC,KAAK,EAAE,OAAO;QACZE,GAAG,EAAE,cAAc;QACnBC,MAAM,EAAE;MACV,CAAC,CAAC;MACF;MACA,MAAMG,cAAc,CAACC,GAAG,QAAgC;QAAA,IAA9B;UAAEC,QAAQ;UAAEC;QAAe,CAAC;QACpD,IAAI;UACF,MAAM;YAAEC;UAAK,CAAC,GAAG,MAAMD,cAAc;UACrCE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;UACjB;UACAF,QAAQ,CAAChB,MAAM,EAAE,CAAC;UAClBqB,UAAU,CAAC,MAAM;YACf;YACAL,QAAQ,CAACjB,QAAQ,CAACuB,IAAI,CAACC,aAAa,EAAE,CAAC;UACzC,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,CAAC,OAAOC,GAAG,EAAE;UACZL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;QAClB;MACF;IACF,CAAC,CAAC;IACF;IACAC,OAAO,EAAEpB,OAAO,CAACE,QAAQ,CAAC;MACxBC,KAAK,EAAE,OAAO;QACZE,GAAG,EAAE,eAAe;QACpBC,MAAM,EAAE;MACV,CAAC,CAAC;MACF;MACA;MACA,MAAMG,cAAc,CAACC,GAAG,SAAgC;QAAA,IAA9B;UAAEC,QAAQ;UAAEC;QAAe,CAAC;QACpD,IAAI;UACF,MAAM;YAAEC;UAAK,CAAC,GAAG,MAAMD,cAAc;UACrC,MAAM;YAAES;UAAY,CAAC,GAAGR,IAAI;UAC5B;UACAF,QAAQ,CAACf,cAAc,CAAC;YAAEyB;UAAY,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;QACpB;MACF;IACF,CAAC;EACH,CAAC;AACH,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEC,gBAAgB;EAAEC,qBAAqB;EAAEC;AAAmB,CAAC,GAC1E5B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}