{"ast":null,"code":"var _jsxFileName = \"/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/auth/RequireAuth.jsx\",\n  _s = $RefreshSig$();\nimport { useLocation, Navigate, Outlet } from \"react-router-dom\";\nimport useAuth from \"../../hooks/useAuth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RequireAuth = _ref => {\n  _s();\n  let {\n    allowedRoles\n  } = _ref;\n  // location for useLocation\n  const location = useLocation();\n\n  // destructuring values from useAuth custom hook\n  const {\n    roles\n  } = useAuth();\n\n  // content variable that will only be displayed if current user roles array includes allowed roles\n  const content = roles.some(role => allowedRoles.includes(role)) ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this) :\n  /*#__PURE__*/\n  // if no allowedRoles redirect the user to login\n  _jsxDEV(Navigate, {\n    to: \"/login\",\n    state: {\n      from: location\n    },\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n  return content;\n};\n_s(RequireAuth, \"sN970N/rkRFSeTSr+EjE80XumFM=\", false, function () {\n  return [useLocation, useAuth];\n});\n_c = RequireAuth;\nexport default RequireAuth;\nvar _c;\n$RefreshReg$(_c, \"RequireAuth\");","map":{"version":3,"names":["useLocation","Navigate","Outlet","useAuth","RequireAuth","allowedRoles","location","roles","content","some","role","includes","from"],"sources":["/home/sidekicksgold/sidekicks/React/daveGray-mern/client/src/Features/auth/RequireAuth.jsx"],"sourcesContent":["import { useLocation, Navigate, Outlet } from \"react-router-dom\";\nimport useAuth from \"../../hooks/useAuth\";\n\nconst RequireAuth = ({ allowedRoles }) => {\n  // location for useLocation\n  const location = useLocation();\n\n  // destructuring values from useAuth custom hook\n  const { roles } = useAuth();\n\n  // content variable that will only be displayed if current user roles array includes allowed roles\n  const content = roles.some((role) => allowedRoles.includes(role)) ? (\n    <Outlet />\n  ) : (\n    // if no allowedRoles redirect the user to login\n    <Navigate to=\"/login\" state={{ from: location }} replace />\n  );\n\n  return content;\n};\nexport default RequireAuth;\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AAChE,OAAOC,OAAO,MAAM,qBAAqB;AAAC;AAE1C,MAAMC,WAAW,GAAG,QAAsB;EAAA;EAAA,IAArB;IAAEC;EAAa,CAAC;EACnC;EACA,MAAMC,QAAQ,GAAGN,WAAW,EAAE;;EAE9B;EACA,MAAM;IAAEO;EAAM,CAAC,GAAGJ,OAAO,EAAE;;EAE3B;EACA,MAAMK,OAAO,GAAGD,KAAK,CAACE,IAAI,CAAEC,IAAI,IAAKL,YAAY,CAACM,QAAQ,CAACD,IAAI,CAAC,CAAC,gBAC/D,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAG;EAAA;EAEV;EACA,QAAC,QAAQ;IAAC,EAAE,EAAC,QAAQ;IAAC,KAAK,EAAE;MAAEE,IAAI,EAAEN;IAAS,CAAE;IAAC,OAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QACzD;EAED,OAAOE,OAAO;AAChB,CAAC;AAAC,GAhBIJ,WAAW;EAAA,QAEEJ,WAAW,EAGVG,OAAO;AAAA;AAAA,KALrBC,WAAW;AAiBjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}